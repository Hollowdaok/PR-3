import telebot
import sqlite3
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot('7899158320:AAEpw7sQE7lNVtlGnpcVYTSxg88V0v8rO20')

cart = {}
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    conn=sqlite3.connect('products.db')
    
    bot.send_message(message.chat.id, f"""\
–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name}, —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑ –≤–∏–±–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.
""")
    
    markup = telebot.types.InlineKeyboardMarkup()
    
    markup.add(telebot.types.InlineKeyboardButton(text='üßÄ –°–∏—Ä', callback_data='cheese'))
    markup.add(telebot.types.InlineKeyboardButton(text='ü•© –ö–æ–≤–±–∞—Å–∞', callback_data='sausage'))
    markup.add(telebot.types.InlineKeyboardButton(text='üç¨ –¶—É–∫–µ—Ä–∫–∏', callback_data='candies'))
    
    bot.send_message(message.chat.id, '–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:', reply_markup=markup)
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –ø–µ–≤–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
def send_products_list(chat_id, category):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name, weight, price, image_url FROM products WHERE category = ?", (category,))
    products = cursor.fetchall()
    conn.close()

    bot.send_message(chat_id, "üõç –í–æ—Ç —Ç–∞–∫—ñ —î —Ç–æ–≤–∞—Ä–∏ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:")

    total_products = len(products)

    for index, product in enumerate(products):
        name, weight, price, image_url = product

        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text="üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", callback_data=f"add_{name}"))

        bot.send_photo(chat_id, image_url, caption=f"üîπ –ù–∞–∑–≤–∞: {name}\nüì¶ –í–∞–≥–∞: {weight}\nüí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω.", reply_markup=markup)

        if index == total_products - 1:
            bot.send_message(chat_id, "–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –æ–¥—Ä–∞–∑—É –¥–æ —ñ–Ω—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–≤—ñ–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:/cheese, /sausage, /candies. –©–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /cart.")
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ /cheese, /sausage, /candies
@bot.message_handler(commands=['cheese', 'sausage', 'candies'])
def handle_category_command(message):

    category = message.text[1:]
    send_products_list(message.chat.id, category)
# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
@bot.callback_query_handler(func=lambda call: call.data in ["cheese", "sausage", "candies"])
def handle_callback_query(call):
    send_products_list(call.message.chat.id, call.data)
    
# –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith("add_"))
def handle_add_to_cart(call):
    user_id = call.from_user.id
    product_name = call.data[4:]
    
    if user_id not in cart:
        cart[user_id] = {}

    if product_name in cart[user_id]:
        cart[user_id][product_name] += 1
    else:
        cart[user_id][product_name] = 1
    
    bot.answer_callback_query(call.id, text=f"–ü—Ä–æ–¥—É–∫—Ç {product_name} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞ (x{cart[user_id][product_name]}).")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cart –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—à–∏–∫–∞
@bot.message_handler(commands=['cart'])
def view_cart(message):
    user_id = message.chat.id
    
    if user_id not in cart or not cart[user_id]:
        bot.send_message(user_id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        cart_items = "\n".join([f"üîπ {item} {count} —à—Ç." for item, count in cart[user_id].items()])
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text="üõç –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order"))
        markup.add(telebot.types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart"))
        
        bot.send_message(user_id, f"üõí –í–∞—à –∫–æ—à–∏–∫:\n\n{cart_items}", reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data == "order")
def order_cart(call):
    user_id = call.message.chat.id
    
    if user_id not in cart or not cart[user_id]:
        bot.answer_callback_query(call.id, text="–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        return
    
    cart_summary = "\n".join([f"üîπ {item} {count} —à—Ç." for item, count in cart[user_id].items()])
    bot.send_message(user_id, f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ! –î—è–∫—É—é –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{cart_summary}")
    
    cart[user_id] = {}

# –û–±—Ä–æ–±–Ω–∏–∫ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "clear_cart")
def clear_cart(call):
    user_id = call.message.chat.id

    bot.answer_callback_query(call.id, text="üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!")
    if user_id in cart:
        cart[user_id] = {}

    bot.send_message(user_id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

    
bot.infinity_polling()